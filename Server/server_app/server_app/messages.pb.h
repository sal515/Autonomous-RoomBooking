// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace instructions {
class request;
class requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class response;
class responseDefaultTypeInternal;
extern responseDefaultTypeInternal _response_default_instance_;
}  // namespace instructions
PROTOBUF_NAMESPACE_OPEN
template<> ::instructions::request* Arena::CreateMaybeMessage<::instructions::request>(Arena*);
template<> ::instructions::response* Arena::CreateMaybeMessage<::instructions::response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace instructions {

// ===================================================================

class request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instructions.request) */ {
 public:
  request();
  virtual ~request();

  request(const request& from);
  request(request&& from) noexcept
    : request() {
    *this = ::std::move(from);
  }

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  inline request& operator=(request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const request* internal_default_instance() {
    return reinterpret_cast<const request*>(
               &_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(request& a, request& b) {
    a.Swap(&b);
  }
  inline void Swap(request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline request* New() const final {
    return CreateMaybeMessage<request>(nullptr);
  }

  request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instructions.request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteParticipantFieldNumber = 5,
    kDateFieldNumber = 2,
    kTimeFieldNumber = 3,
    kTopicFieldNumber = 6,
    kRequestIdFieldNumber = 1,
    kMinimumFieldNumber = 4,
  };
  // repeated string inviteParticipant = 5;
  int inviteparticipant_size() const;
  private:
  int _internal_inviteparticipant_size() const;
  public:
  void clear_inviteparticipant();
  const std::string& inviteparticipant(int index) const;
  std::string* mutable_inviteparticipant(int index);
  void set_inviteparticipant(int index, const std::string& value);
  void set_inviteparticipant(int index, std::string&& value);
  void set_inviteparticipant(int index, const char* value);
  void set_inviteparticipant(int index, const char* value, size_t size);
  std::string* add_inviteparticipant();
  void add_inviteparticipant(const std::string& value);
  void add_inviteparticipant(std::string&& value);
  void add_inviteparticipant(const char* value);
  void add_inviteparticipant(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inviteparticipant() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inviteparticipant();
  private:
  const std::string& _internal_inviteparticipant(int index) const;
  std::string* _internal_add_inviteparticipant();
  public:

  // string date = 2;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string time = 3;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string topic = 6;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // int32 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minimum = 4;
  void clear_minimum();
  ::PROTOBUF_NAMESPACE_ID::int32 minimum() const;
  void set_minimum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minimum() const;
  void _internal_set_minimum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:instructions.request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inviteparticipant_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instructions.response) */ {
 public:
  response();
  virtual ~response();

  response(const response& from);
  response(response&& from) noexcept
    : response() {
    *this = ::std::move(from);
  }

  inline response& operator=(const response& from) {
    CopyFrom(from);
    return *this;
  }
  inline response& operator=(response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const response* internal_default_instance() {
    return reinterpret_cast<const response*>(
               &_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(response& a, response& b) {
    a.Swap(&b);
  }
  inline void Swap(response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline response* New() const final {
    return CreateMaybeMessage<response>(nullptr);
  }

  response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const response& from);
  void MergeFrom(const response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instructions.response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int32 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:instructions.response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// request

// int32 requestId = 1;
inline void request::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::requestid() const {
  // @@protoc_insertion_point(field_get:instructions.request.requestId)
  return _internal_requestid();
}
inline void request::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void request::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:instructions.request.requestId)
}

// string date = 2;
inline void request::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& request::date() const {
  // @@protoc_insertion_point(field_get:instructions.request.date)
  return _internal_date();
}
inline void request::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:instructions.request.date)
}
inline std::string* request::mutable_date() {
  // @@protoc_insertion_point(field_mutable:instructions.request.date)
  return _internal_mutable_date();
}
inline const std::string& request::_internal_date() const {
  return date_.GetNoArena();
}
inline void request::_internal_set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void request::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:instructions.request.date)
}
inline void request::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:instructions.request.date)
}
inline void request::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:instructions.request.date)
}
inline std::string* request::_internal_mutable_date() {
  
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* request::release_date() {
  // @@protoc_insertion_point(field_release:instructions.request.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void request::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:instructions.request.date)
}

// string time = 3;
inline void request::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& request::time() const {
  // @@protoc_insertion_point(field_get:instructions.request.time)
  return _internal_time();
}
inline void request::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:instructions.request.time)
}
inline std::string* request::mutable_time() {
  // @@protoc_insertion_point(field_mutable:instructions.request.time)
  return _internal_mutable_time();
}
inline const std::string& request::_internal_time() const {
  return time_.GetNoArena();
}
inline void request::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void request::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:instructions.request.time)
}
inline void request::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:instructions.request.time)
}
inline void request::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:instructions.request.time)
}
inline std::string* request::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* request::release_time() {
  // @@protoc_insertion_point(field_release:instructions.request.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void request::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:instructions.request.time)
}

// int32 minimum = 4;
inline void request::clear_minimum() {
  minimum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_minimum() const {
  return minimum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::minimum() const {
  // @@protoc_insertion_point(field_get:instructions.request.minimum)
  return _internal_minimum();
}
inline void request::_internal_set_minimum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minimum_ = value;
}
inline void request::set_minimum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minimum(value);
  // @@protoc_insertion_point(field_set:instructions.request.minimum)
}

// repeated string inviteParticipant = 5;
inline int request::_internal_inviteparticipant_size() const {
  return inviteparticipant_.size();
}
inline int request::inviteparticipant_size() const {
  return _internal_inviteparticipant_size();
}
inline void request::clear_inviteparticipant() {
  inviteparticipant_.Clear();
}
inline std::string* request::add_inviteparticipant() {
  // @@protoc_insertion_point(field_add_mutable:instructions.request.inviteParticipant)
  return _internal_add_inviteparticipant();
}
inline const std::string& request::_internal_inviteparticipant(int index) const {
  return inviteparticipant_.Get(index);
}
inline const std::string& request::inviteparticipant(int index) const {
  // @@protoc_insertion_point(field_get:instructions.request.inviteParticipant)
  return _internal_inviteparticipant(index);
}
inline std::string* request::mutable_inviteparticipant(int index) {
  // @@protoc_insertion_point(field_mutable:instructions.request.inviteParticipant)
  return inviteparticipant_.Mutable(index);
}
inline void request::set_inviteparticipant(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:instructions.request.inviteParticipant)
  inviteparticipant_.Mutable(index)->assign(value);
}
inline void request::set_inviteparticipant(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:instructions.request.inviteParticipant)
  inviteparticipant_.Mutable(index)->assign(std::move(value));
}
inline void request::set_inviteparticipant(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inviteparticipant_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:instructions.request.inviteParticipant)
}
inline void request::set_inviteparticipant(int index, const char* value, size_t size) {
  inviteparticipant_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:instructions.request.inviteParticipant)
}
inline std::string* request::_internal_add_inviteparticipant() {
  return inviteparticipant_.Add();
}
inline void request::add_inviteparticipant(const std::string& value) {
  inviteparticipant_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:instructions.request.inviteParticipant)
}
inline void request::add_inviteparticipant(std::string&& value) {
  inviteparticipant_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:instructions.request.inviteParticipant)
}
inline void request::add_inviteparticipant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inviteparticipant_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:instructions.request.inviteParticipant)
}
inline void request::add_inviteparticipant(const char* value, size_t size) {
  inviteparticipant_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:instructions.request.inviteParticipant)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
request::inviteparticipant() const {
  // @@protoc_insertion_point(field_list:instructions.request.inviteParticipant)
  return inviteparticipant_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
request::mutable_inviteparticipant() {
  // @@protoc_insertion_point(field_mutable_list:instructions.request.inviteParticipant)
  return &inviteparticipant_;
}

// string topic = 6;
inline void request::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& request::topic() const {
  // @@protoc_insertion_point(field_get:instructions.request.topic)
  return _internal_topic();
}
inline void request::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:instructions.request.topic)
}
inline std::string* request::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:instructions.request.topic)
  return _internal_mutable_topic();
}
inline const std::string& request::_internal_topic() const {
  return topic_.GetNoArena();
}
inline void request::_internal_set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void request::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:instructions.request.topic)
}
inline void request::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:instructions.request.topic)
}
inline void request::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:instructions.request.topic)
}
inline std::string* request::_internal_mutable_topic() {
  
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* request::release_topic() {
  // @@protoc_insertion_point(field_release:instructions.request.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void request::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:instructions.request.topic)
}

// -------------------------------------------------------------------

// response

// int32 requestId = 1;
inline void response::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 response::requestid() const {
  // @@protoc_insertion_point(field_get:instructions.response.requestId)
  return _internal_requestid();
}
inline void response::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void response::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:instructions.response.requestId)
}

// string description = 2;
inline void response::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& response::description() const {
  // @@protoc_insertion_point(field_get:instructions.response.description)
  return _internal_description();
}
inline void response::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:instructions.response.description)
}
inline std::string* response::mutable_description() {
  // @@protoc_insertion_point(field_mutable:instructions.response.description)
  return _internal_mutable_description();
}
inline const std::string& response::_internal_description() const {
  return description_.GetNoArena();
}
inline void response::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void response::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:instructions.response.description)
}
inline void response::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:instructions.response.description)
}
inline void response::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:instructions.response.description)
}
inline std::string* response::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* response::release_description() {
  // @@protoc_insertion_point(field_release:instructions.response.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void response::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:instructions.response.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace instructions

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
